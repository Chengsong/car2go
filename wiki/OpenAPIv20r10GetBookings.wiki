#summary GetBookings (v2.0 rev1.0)

[OpenAPIv20r10FunctionIndex Function Index]

<h1>Get bookings (v2.0 rev1.0)</h1><p>Provides a list of all current bookings of a user. Access to this function is restricted. See [OpenAPIOAuthr10 OAuth  documentation] for more details.</p><table class="funcdetail"><tr><td class="funcdetailheader">Access:</td><td>protected</td></tr><tr><td class="funcdetailheader">URL:</td><td>https://www.car2go.com/api/v2.0/bookings</td></tr><tr><td class="funcdetailheader">Method:</td><td>GET</td></tr></table>
<h3>Parameters</h3><table class="parameters"><thead><tr><th>Name</th><th>Mandatory</th><th>Description</th></tr></thead><tbody><tr><td>loc</td><td>true</td><td> location identifier string of the user's home location, e.g. "ulm", "austin".</td></tr><tr><td>format</td><td>false</td><td> defines response format. Value "json" => JSON format, otherwise xml format is used</td></tr><tr><td>callback</td><td>false</td><td> defines JSONP (JSON with Padding) callback function used as wrapper</td></tr></tbody></table>
<h3>Request Examples</h3><div class="sample"><pre>
 GET https://www.car2go.com/api/v2.0/bookings?loc=ulm&amp;format=json
 </pre></div><div class="sample"><pre>
 GET https://www.car2go.com/api/v2.0/bookings?loc=austin
 </pre></div>
<h3>Response</h3>Each booking consists of
                  <ul>
                  <li>returnValue - see list of return codes below and <a href="index.html#returnvalues">return values</a> for more details</li>
                  </ul>
                  <ul>
                  <li>a unique booking Id</li>
                  <li>a reservation time: date time string, according to ISO 8601, e.g. 2010-01-21T13:05+01:00</li>
                  <li>a booking position: longitude and latitude of booking</li>
                  <li>account information: id and description of the account which will be charged</li>
                  <li>and vehicle information (optional, depends on whether a vehicles has already been assigned or not)</li>
                  </ul>
 
                  Vehicle information consists of
                  <ul>
                  <li>vin unique, textual vehicle identifier</li>
                  <li>numberPlate number plate of vehicle, e.g. used to identify car on the street</li>
                  <li>fuel level</li>
                  <li>interior</li>
                  <li>exterior</li>
                  <li>position: longitude and latitude of vehicle</li>
                  </ul>
<h3>Response Examples</h3><div class="sample">A XML response example:
 
<blockquote>
 <?xml version="1.0" encoding="UTF-8"?>
 {{{<c2g:bookingResponse xmlns:c2g="http://www.car2go.com/openapi/xmlschema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >}}}
   {{{<c2g:returnValue>}}}
     {{{<c2g:code>}}}0{{{</c2g:code>}}}
     {{{<c2g:description>}}}Operation successful.{{{</c2g:description>}}}
   {{{</c2g:returnValue>}}}  
   {{{<c2g:booking>}}}
     {{{<c2g:bookingId>}}}4321{{{</c2g:bookingId>}}}
     {{{<c2g:reservationTime>}}}2001-12-31T12:00:00+01:00{{{</c2g:reservationTime>}}}
     {{{<c2g:bookingposition>}}}
         {{{<c2g:latitude>}}}48.4008{{{</c2g:latitude>}}}
         {{{<c2g:longitude>}}}9.9596{{{</c2g:longitude>}}}
         {{{<c2g:address>}}}Blaubeurer Straße 128, 89077 Ulm{{{</c2g:address>}}}
     {{{</c2g:bookingposition>}}}
     {{{<c2g:account>}}}    
 		{{{<c2g:accountId>}}}5678{{{</c2g:accountId>}}}
 		{{{<c2g:description>}}}Max Mustermann{{{</c2g:description>}}}    
     {{{</c2g:account>}}}
     {{{<c2g:vehicle>}}}
       {{{<c2g:vin>}}}WME4513001K154451{{{</c2g:vin>}}}
       {{{<c2g:numberPlate>}}}UL-C5713{{{</c2g:numberPlate>}}}
       {{{<fuel>}}}90{{{</fuel>}}} 
   	  {{{<interior>}}}EXCELLENT{{{</interior>}}} 
   	  {{{<exterior>}}}EXCELLENT{{{</exterior>}}} 
       {{{<c2g:position>}}}
         {{{<c2g:latitude>}}}48.4008{{{</c2g:latitude>}}}
         {{{<c2g:longitude>}}}9.9596{{{</c2g:longitude>}}}
         {{{<c2g:address>}}}Blaubeurer Straße 128, 89077 Ulm{{{</c2g:address>}}}
       {{{</c2g:position>}}}
     {{{</c2g:vehicle>}}}
   {{{</c2g:booking>}}}  
   {{{<c2g:booking>}}}
     {{{<c2g:bookingId>}}}4321{{{</c2g:bookingId>}}}
     {{{<c2g:reservationTime>}}}2001-12-31T13:00:00+01:00{{{</c2g:reservationTime>}}}
     {{{<c2g:bookingposition>}}}
         {{{<c2g:latitude>}}}48.1048{{{</c2g:latitude>}}}
         {{{<c2g:longitude>}}}8.1591{{{</c2g:longitude>}}}
         {{{<c2g:address>}}}Lange Straße 67, 82828 Großstadt{{{</c2g:address>}}}
     {{{</c2g:bookingposition>}}}
     {{{<c2g:account>}}}
 		{{{<c2g:accountId>}}}5678{{{</c2g:accountId>}}}
 		{{{<c2g:description>}}}Max Mustermann{{{</c2g:description>}}}    
     {{{</c2g:account>}}} 
   {{{</c2g:booking>}}}
 {{{</c2g:bookingResponse>}}}
 </blockquote></div>
<div class="sample">A JSON response example:
 
 <pre>
 {&quot;returnValue&quot;:{&quot;code&quot;:0,&quot;description&quot;:&quot;Operation successful.&quot;},&quot;booking&quot;:[]}
 </pre></div><h3>Return Codes</h3>The following return codes may occur:<table><thead><tr><th>Code</th><th>Description</th><th>Note</th></tr></thead><tr><td>0</td><td>Operation successful.</td><td></td></tr><tr><td>1</td><td>Location invalid.</td><td></td></tr><tr><td>3</td><td>No valid accounts found.</td><td> The user has no valid accounts. This occurs when the user has no account and is not invited to any accounts.</td></tr><tr><td>4</td><td>Not all necessary url parameters provided.</td><td></td></tr><tr><td>5</td><td>A technical error occured.</td><td> This error can occur in case of application problems. If this error persist, please report the bug.</td></tr></table><div class="footer">&copy; 2010 car2go GmbH. All rights reserved. Generated 18.05.10 02:04</div>